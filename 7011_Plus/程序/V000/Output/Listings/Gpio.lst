C51 COMPILER V9.57.0.0   GPIO                                                              06/09/2020 17:10:01 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN ..\Output\Objects\Gpio.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\User\AppCode\DriverLayer\Gpio.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..
                    -\User\AppCode\AppLayer;..\User\AppCode\DriverLayer;..\User\AppCode\ManageLayer;..\User\AppCode\WIFILayer;..\User\SysCode
                    -\Core) DEBUG OBJECTEXTEND PRINT(..\Output\Listings\Gpio.lst) OBJECT(..\Output\Objects\Gpio.obj)

line level    source

   1          #include "Gpio.h"
   2          #include "TypeDef.h"
   3          
   4          //#define Main_Fosc_KHZ (MAIN_Fosc / 1000)
   5          
   6          #define GPIO_PullUp             0       //上拉准双向口
   7          #define GPIO_HighZ              1       //浮空输入
   8          #define GPIO_OUT_OD             2       //开漏输出
   9          #define GPIO_OUT_PP             3       //推挽输出
  10          
  11          #define GPIO_Pin_0              0x01    //IO引脚 Px.0
  12          #define GPIO_Pin_1              0x02    //IO引脚 Px.1
  13          #define GPIO_Pin_2              0x04    //IO引脚 Px.2
  14          #define GPIO_Pin_3              0x08    //IO引脚 Px.3
  15          #define GPIO_Pin_4              0x10    //IO引脚 Px.4
  16          #define GPIO_Pin_5              0x20    //IO引脚 Px.5
  17          #define GPIO_Pin_6              0x40    //IO引脚 Px.6
  18          #define GPIO_Pin_7              0x80    //IO引脚 Px.7
  19          #define GPIO_Pin_All    0xFF    //IO所有引脚
  20                  
  21          #define GPIO_P0                 0               //
  22          #define GPIO_P1                 1
  23          #define GPIO_P2                 2
  24          #define GPIO_P3                 3
  25          #define GPIO_P4                 4
  26          #define GPIO_P5                 5
  27          
  28          
  29          typedef struct
  30          {
  31                  UI08    Mode;           //IO模式,               GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP
  32                  UI08    Pin;            //要设置的端口  
  33          } GPIO_InitTypeDef;
  34          
  35          
  36          
  37          
  38          //========================================================================
  39          // 函数: u8     GPIO_Inilize(u8 GPIO, GPIO_InitTypeDef *GPIOx)
  40          // 描述: 初始化IO口.
  41          // 参数: GPIOx: 结构参数,请参考timer.h里的定义.
  42          // 返回: 成功返回0, 空操作返回1,错误返回2.
  43          // 版本: V1.0, 2017-3-3
  44          //========================================================================
  45          Gpio_e  GPIO_Inilize(UI08 GPIO, GPIO_InitTypeDef *GPIOx)
  46          {
  47   1              if(GPIO > GPIO_P5)                                              return (GPIO_ERROR_NULL);       //空操作
  48   1              if(GPIOx->Mode > GPIO_OUT_PP)   return (GPIO_ERROR_FAILURE);    //错误
  49   1              if(GPIO == GPIO_P0)
  50   1              {
  51   2                      if(GPIOx->Mode == GPIO_PullUp)          {P0M1 &= ~GPIOx->Pin,   P0M0 &= ~GPIOx->Pin;}    //上拉准双向口
  52   2                      if(GPIOx->Mode == GPIO_HighZ)                   {P0M1 |=  GPIOx->Pin,   P0M0 &= ~GPIOx->Pin;}    //浮空输入
  53   2                      if(GPIOx->Mode == GPIO_OUT_OD)          {P0M1 |=  GPIOx->Pin,   P0M0 |=  GPIOx->Pin;}    //开漏输出
C51 COMPILER V9.57.0.0   GPIO                                                              06/09/2020 17:10:01 PAGE 2   

  54   2                      if(GPIOx->Mode == GPIO_OUT_PP)          {P0M1 &= ~GPIOx->Pin,   P0M0 |=  GPIOx->Pin;}    //推挽输出
  55   2              }
  56   1              if(GPIO == GPIO_P1)
  57   1              {
  58   2                      if(GPIOx->Mode == GPIO_PullUp)          {P1M1 &= ~GPIOx->Pin,   P1M0 &= ~GPIOx->Pin;}    //上拉准双向口
  59   2                      if(GPIOx->Mode == GPIO_HighZ)                   {P1M1 |=  GPIOx->Pin,   P1M0 &= ~GPIOx->Pin;}    //浮空输入
  60   2                      if(GPIOx->Mode == GPIO_OUT_OD)          {P1M1 |=  GPIOx->Pin,   P1M0 |=  GPIOx->Pin;}    //开漏输出
  61   2                      if(GPIOx->Mode == GPIO_OUT_PP)          {P1M1 &= ~GPIOx->Pin,   P1M0 |=  GPIOx->Pin;}    //推挽输出
  62   2              }
  63   1              if(GPIO == GPIO_P2)
  64   1              {
  65   2                      if(GPIOx->Mode == GPIO_PullUp)          {P2M1 &= ~GPIOx->Pin,   P2M0 &= ~GPIOx->Pin;}    //上拉准双向口
  66   2                      if(GPIOx->Mode == GPIO_HighZ)                   {P2M1 |=  GPIOx->Pin,   P2M0 &= ~GPIOx->Pin;}    //浮空输入
  67   2                      if(GPIOx->Mode == GPIO_OUT_OD)          {P2M1 |=  GPIOx->Pin,   P2M0 |=  GPIOx->Pin;}    //开漏输出
  68   2                      if(GPIOx->Mode == GPIO_OUT_PP)          {P2M1 &= ~GPIOx->Pin,   P2M0 |=  GPIOx->Pin;}    //推挽输出
  69   2              }
  70   1              if(GPIO == GPIO_P3)
  71   1              {
  72   2                      if(GPIOx->Mode == GPIO_PullUp)          {P3M1 &= ~GPIOx->Pin,   P3M0 &= ~GPIOx->Pin;}    //上拉准双向口
  73   2                      if(GPIOx->Mode == GPIO_HighZ)                   {P3M1 |=  GPIOx->Pin,   P3M0 &= ~GPIOx->Pin;}    //浮空输入
  74   2                      if(GPIOx->Mode == GPIO_OUT_OD)          {P3M1 |=  GPIOx->Pin,   P3M0 |=  GPIOx->Pin;}    //开漏输出
  75   2                      if(GPIOx->Mode == GPIO_OUT_PP)          {P3M1 &= ~GPIOx->Pin,   P3M0 |=  GPIOx->Pin;}    //推挽输出
  76   2              }
  77   1              if(GPIO == GPIO_P4)
  78   1              {
  79   2                      if(GPIOx->Mode == GPIO_PullUp)          {P4M1 &= ~GPIOx->Pin,   P4M0 &= ~GPIOx->Pin;}    //上拉准双向口
  80   2                      if(GPIOx->Mode == GPIO_HighZ)                   {P4M1 |=  GPIOx->Pin,   P4M0 &= ~GPIOx->Pin;}    //浮空输入
  81   2                      if(GPIOx->Mode == GPIO_OUT_OD)          {P4M1 |=  GPIOx->Pin,   P4M0 |=  GPIOx->Pin;}    //开漏输出
  82   2                      if(GPIOx->Mode == GPIO_OUT_PP)          {P4M1 &= ~GPIOx->Pin,   P4M0 |=  GPIOx->Pin;}    //推挽输出
  83   2              }
  84   1              if(GPIO == GPIO_P5)
  85   1              {
  86   2                      if(GPIOx->Mode == GPIO_PullUp)          {P5M1 &= ~GPIOx->Pin,   P5M0 &= ~GPIOx->Pin;}    //上拉准双向口
  87   2                      if(GPIOx->Mode == GPIO_HighZ)                   {P5M1 |=  GPIOx->Pin,   P5M0 &= ~GPIOx->Pin;}    //浮空输入
  88   2                      if(GPIOx->Mode == GPIO_OUT_OD)          {P5M1 |=  GPIOx->Pin,   P5M0 |=  GPIOx->Pin;}    //开漏输出
  89   2                      if(GPIOx->Mode == GPIO_OUT_PP)          {P5M1 &= ~GPIOx->Pin,   P5M0 |=  GPIOx->Pin;}    //推挽输出
  90   2              }
  91   1              return (GPIO_ERROR_OK); //成功
  92   1      }
  93          //========================================================================
  94          // 函数: u8     GPIO_Init(void)
  95          // 描述: 初始化IO口.
  96          // 参数: GPIOx: 结构参数,请参考timer.h里的定义.
  97          // 返回: 成功返回0, 空操作返回1,错误返回2.
  98          // 版本: V1.0, 2017-3-3
  99          //========================================================================
 100          Gpio_e  Init_GPIO(void)
 101          {
 102   1              GPIO_InitTypeDef        GPIO_InitStructure;     
 103   1              
 104   1              GPIO_InitStructure.Pin  = GPIO_Pin_All; 
 105   1              GPIO_InitStructure.Mode = GPIO_PullUp;  
 106   1              GPIO_Inilize(GPIO_P0,&GPIO_InitStructure);
 107   1              
 108   1      
 109   1              GPIO_InitStructure.Pin  = GPIO_Pin_All; 
 110   1              GPIO_InitStructure.Mode = GPIO_PullUp;
 111   1              GPIO_Inilize(GPIO_P1,&GPIO_InitStructure);
 112   1              
 113   1              GPIO_InitStructure.Pin  = GPIO_Pin_All; 
 114   1              GPIO_InitStructure.Mode = GPIO_PullUp;  
 115   1              GPIO_Inilize(GPIO_P2,&GPIO_InitStructure);
C51 COMPILER V9.57.0.0   GPIO                                                              06/09/2020 17:10:01 PAGE 3   

 116   1              
 117   1      
 118   1              GPIO_InitStructure.Pin  = GPIO_Pin_All; 
 119   1              GPIO_InitStructure.Mode = GPIO_PullUp;  
 120   1              GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);
 121   1      
 122   1              GPIO_InitStructure.Pin  = GPIO_Pin_All; 
 123   1              GPIO_InitStructure.Mode = GPIO_PullUp;  
 124   1              GPIO_Inilize(GPIO_P4,&GPIO_InitStructure);
 125   1              
 126   1              GPIO_InitStructure.Pin  = GPIO_Pin_All; 
 127   1              GPIO_InitStructure.Mode = GPIO_PullUp;  
 128   1              GPIO_Inilize(GPIO_P5,&GPIO_InitStructure);
 129   1              
 130   1      
 131   1              GPIO_InitStructure.Pin  = GPIO_Pin_0;       // 继电器 推挽输出
 132   1              GPIO_InitStructure.Mode = GPIO_OUT_PP;  
 133   1              GPIO_Inilize(GPIO_P0,&GPIO_InitStructure);
 134   1      
 135   1              GPIO_InitStructure.Pin  = GPIO_Pin_3;       // LED灯亮度控制
 136   1              GPIO_InitStructure.Mode = GPIO_OUT_PP;  
 137   1              GPIO_Inilize(GPIO_P2,&GPIO_InitStructure);
 138   1              
 139   1              GPIO_InitStructure.Pin  = GPIO_Pin_6;       // 按键
 140   1              GPIO_InitStructure.Mode = GPIO_HighZ;   
 141   1              GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);
 142   1              
 143   1              GPIO_InitStructure.Pin  = GPIO_Pin_7;       // 按键
 144   1              GPIO_InitStructure.Mode = GPIO_HighZ;   
 145   1              GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);
 146   1      
 147   1              return (GPIO_ERROR_OK); //成功
 148   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    612    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
